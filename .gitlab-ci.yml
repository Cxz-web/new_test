image: node:8.9.3
stages:
  - pack
  - build
  - test
  - deploy

variables:
  ALI_REGISTRY_HOST: "registry.cn-shenzhen.aliyuncs.com"
  ALI_REGISTRY_IMAGE: "registry.cn-shenzhen.aliyuncs.com/double-teacher/advertising-machine"
  ALI_SERVICE_NAME: "double-teacher-prod_advertising-machine"
  TEST_SERVICE_NAME: "double-teacher-test_advertising-machine"


testbuild:
  stage: build
  script:
    - npm install --no-optional
    - npm run debug
    - node ./tools/generate.config.js test
    - qshell='./tools/qshell-linux-x64'
    - chmod a+x "${qshell}"
    - ${qshell} account "${QINIU_AK}" "${QINIU_SK}"
    - ${qshell} qupload 8 ./qiniuconfig
  only:
    - dev
  artifacts:
   expire_in: 1 week
   paths:
     - dist

deploy:
  image: sebble/deploy
  stage: deploy
  script:
    - mkdir -p ~/.ssh
    - echo "$TEST_DEPLOY_SSH" >> ~/.ssh/id_dsa
    - chmod 600 ~/.ssh/id_dsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - rsync -rav -e 'ssh -p 1078' dist/* "$TEST_DEPLOY_USER"@"$TEST_DEPLOY_HOST":/data/www_courseenter
  only:
    - dev

pack-test:
  stage: pack
  script:
    - npm install --no-optional
    - npm run debug
    - node ./tools/generate.config.js test
    - qshell='./tools/qshell-linux-x64'
    - chmod a+x "${qshell}"
    - ${qshell} account "${QINIU_AK}" "${QINIU_SK}"
    - ${qshell} qupload 8 ./qiniuconfig
  only:
    - test
  artifacts:
   expire_in: 1 week
   paths:
     - dist

build-test:
  stage: build
  image: docker:latest
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHA -t $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest -f docker/test/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  only:
    - test

deploy-test:
  stage: deploy
  variables:
    DOCKER_HOST: $DOCKER_HOST_TEST
    DOCKER_TLS_VERIFY: 1
  image: docker:latest
  script:
    - mkdir -p ~/.docker
    - echo "$DOCKER_HOST_TLS_CA_CERT_TEST" > ~/.docker/ca.pem
    - echo "$DOCKER_HOST_TLS_CERT_TEST" > ~/.docker/cert.pem
    - echo "$DOCKER_HOST_TLS_KEY_TEST" > ~/.docker/key.pem
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker service update --with-registry-auth --image $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHA $TEST_SERVICE_NAME
  only:
    - test

pack-master:
  stage: pack
  script:
    - npm install --no-optional
    - npm run build
    - node ./tools/generate.config.js
    - qshell='./tools/qshell-linux-x64'
    - chmod a+x "${qshell}"
    - ${qshell} account "${QINIU_AK}" "${QINIU_SK}"
    - ${qshell} qupload 8 ./qiniuconfig
  only:
    - tags
  artifacts:
    expire_in: 1 week
    paths:
      - dist

build-master:
  stage: build
  image: docker:latest
  script:
    - docker login -u $ALI_REGISTRY_USER -p $ALI_REGISTRY_PASSWORD $ALI_REGISTRY_HOST
    - docker build -t $ALI_REGISTRY_IMAGE:$CI_COMMIT_TAG -t $ALI_REGISTRY_IMAGE:latest -f docker/prod/Dockerfile .
    - docker push $ALI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $ALI_REGISTRY_IMAGE:latest
  only:
    - tags

deploy-master:
  stage: deploy
  variables:
    DOCKER_HOST: $DOCKER_HOST_ALI
    DOCKER_TLS_VERIFY: 1
  image: tmaier/docker-compose:latest
  script:
    - mkdir -p ~/.docker
    - echo "$DOCKER_HOST_TLS_CA_CERT_ALI" > ~/.docker/ca.pem
    - echo "$DOCKER_HOST_TLS_CERT_ALI" > ~/.docker/cert.pem
    - echo "$DOCKER_HOST_TLS_KEY_ALI" > ~/.docker/key.pem
    - docker login -u $ALI_REGISTRY_USER -p $ALI_REGISTRY_PASSWORD $ALI_REGISTRY_HOST
    - docker service update --image $ALI_REGISTRY_IMAGE:$CI_COMMIT_TAG $ALI_SERVICE_NAME
  only:
    - tags


pack-prod:
  stage: pack
  script:
    - npm install --no-optional
    - npm run build
    - node ./tools/generate.config.js
    - qshell='./tools/qshell-linux-x64'
    - chmod a+x "${qshell}"
    - ${qshell} account "${QINIU_AK}" "${QINIU_SK}"
    - ${qshell} qupload 8 ./qiniuconfig
  only:
    - prod
  artifacts:
    expire_in: 1 week
    paths:
      - dist

build-prod:
  stage: build
  image: docker:latest
  script:
    - docker login -u $ALI_REGISTRY_USER -p $ALI_REGISTRY_PASSWORD $ALI_REGISTRY_HOST
    - docker build -t $ALI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHA -t $ALI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest -f docker/prod/Dockerfile .
    - docker push $ALI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHA
    - docker push $ALI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  only:
    - prod

deploy-prod:
  stage: deploy
  variables:
    DOCKER_HOST: $DOCKER_HOST_ALI
    DOCKER_TLS_VERIFY: 1
  image: tmaier/docker-compose:latest
  script:
    - mkdir -p ~/.docker
    - echo "$DOCKER_HOST_TLS_CA_CERT_ALI" > ~/.docker/ca.pem
    - echo "$DOCKER_HOST_TLS_CERT_ALI" > ~/.docker/cert.pem
    - echo "$DOCKER_HOST_TLS_KEY_ALI" > ~/.docker/key.pem
    - docker login -u $ALI_REGISTRY_USER -p $ALI_REGISTRY_PASSWORD $ALI_REGISTRY_HOST
    - docker service update --image $ALI_REGISTRY_IMAGE/CI_COMMIT_REF_NAME:latest $ALI_SERVICE_NAME
  only:
    - prod
